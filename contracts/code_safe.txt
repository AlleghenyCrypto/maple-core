/**
     * @notice Fund this loan and mint LoanTokens.
     * @param _amount Amount of _assetRequested to fund the loan for.
     * @param _toMint The address to mint LoanVaultTokens for.
    */
    function fundLoan(uint _amount, address _toMint) external isState(State.Live) {
        // TODO: Consider decimal precision difference: RequestedAsset <> FundsToken
        require(
            IRequestedAsset.transferFrom(msg.sender, address(this), _amount),
            "LoanVault::fundLoan:ERR_INSUFFICIENT_APPROVED_FUNDS"
        );
        require(
            IRequestedAsset.transfer(fundingLocker, _amount), 
            "LoanVault::fundLoan:ERR_TRANSFER_FUNDS"
        );
        _mint(_toMint, _amount);
    }

    /// @notice End funding period by claiming funds, posting collateral, transitioning loanState from Funding to Active.
    /// @param _drawdownAmount Amount of fundingAsset borrower will claim, remainder is returned to LoanVault.
    // TODO: Implement and test this function.
    function drawdown(uint _drawdownAmount) external isState(State.Live) isBorrower {

        require(
            _drawdownAmount >= minRaise, 
            "LoanVault::endFunding::ERR_DRAWDOWN_AMOUNT_BELOW_MIN_RAISE"
        );
        require(
            _drawdownAmount <= IRequestedAsset.balanceOf(fundingLocker), 
            "LoanVault::endFunding::ERR_DRAWDOWN_AMOUNT_ABOVE_FUNDING_LOCKER_BALANCE"
        );

        loanState = State.Active;

        // Instantiate collateral locker, fetch deposit required, transfer collateral from borrower to locker.
        collateralLocker = ICollateralLockerFactory(collateralLockerFactory).newLocker(assetCollateral);
        uint collateralAmountToPost = collateralRequiredForDrawdown(_drawdownAmount);
        require(
            ICollateralAsset.transferFrom(borrower, collateralLocker, collateralAmountToPost), 
            "LoanVault::endFunding:ERR_COLLATERAL_TRANSFER_FROM_APPROVAL_OR_BALANCE"
        );

        // Transfer funding amount from FundingLocker to Borrower, then remaining funds to LoanVault.
        require(
            IFundingLocker(fundingLocker).pull(borrower, _drawdownAmount), 
            "LoanVault::endFunding:CRITICAL_ERR_PULL"
        );
        require(
            IFundingLocker(fundingLocker).drain(),
            "LoanVault::endFunding:ERR_DRAIN"
        );
    }

    /// @notice Viewer helper for calculating collateral required to drawdown funding.
    /// @param _drawdownAmount The amount of fundingAsset to drawdown from FundingLocker.
    /// @return The amount of collateralAsset required to post for given _amount.
    function collateralRequiredForDrawdown(uint _drawdownAmount) internal view returns(uint) {
        return _drawdownAmount.mul(collateralAtDesiredRaise).div(desiredRaise);
    }